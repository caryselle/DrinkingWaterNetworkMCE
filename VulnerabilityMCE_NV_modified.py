from Simple_CSV_updated import SimpleCSV

csv = SimpleCSV()

csv.set_work_dir("C:\\Path\\to\\working\\directory\\")

csv.read_csv("Name_of_Asset_CSV.csv") 

# Create variables for factors by calling their field names
pipeAge = csv.return_column(column="YEAROFCONS") # you can also specify the name of the column now (must be exact) instead of the index, in case the columns get shuffled around. Obviously I don't know the actual name of this column
pipeDiameter = csv.return_column(column="DIAMETER_m")
roadType = csv.return_column(column="RoadType", type="Text")
railways = csv.return_column(column="Cross_Rail", type="Text")


FactorList = ["MATERIAL", "YEAROFCONS", "Cross_Rail", "RoadType", "DIAMETER_m"] 


# RESCALE EVERYTHING
pipeAge_rescale = csv.math_rescale(pipeAge,0,100,inverted=True)

pipeDiameter_rescale = csv.math_rescale(pipeDiameter,0,100, inverted=True)

Railways_List= ["No","Yes"]
railways_rescale = csv.math_rescale_categorical(railways, Railways_List, new_min=0,new_max=100) 

pipeMaterial_rescale = []
for val in pipeMaterial:
    if val == "Ductile":
        pipeMaterial_rescale.append(0)
    elif val == "Copper":
        pipeMaterial_rescale.append(50)
    elif val == "Steel":
        pipeMaterial_rescale.append(50)
    elif val == "Cast Iron":
        pipeMaterial_rescale.append(100)
    elif val == "Iron":
        pipeMaterial_rescale.append(100)

traffic_List = ["None","Local", "Collector", "Arterial"] #best to worst categorically
traffic_rescale = csv.math_rescale_categorical(roadType,traffic_List,new_min = 0, new_max = 100)


# APPLY WEIGHTS
all_criteria_not_weighted = [pipeDiameter_rescale, pipeAge_rescale, pipeMaterial_rescale,traffic_rescale,railways_rescale] # this list holds all the lists of criteria
weights = [0.0729,0.1568,0.1579,0.0999,0.5126] #the weights need to be defined in the same order that the criteria were added to the list above

# Pipe Diameter - 0.0729 
# Pipe Age - 0.1568
# Pipe Material - 0.1579
# Traffic Level - 0.0999
# Railways - 0.5126

all_weighted_criteria = [] # we make a new list that will hold all of the other lists of criteria data once we've weighted them. You'll see why in a moment.

# CALCULATE WEIGHTED SCORES
for i in range(len(all_criteria_not_weighted)):
    weighted = csv.math_multiply(vals = all_criteria_not_weighted[i],spec_value=weights[i]) # we multiply each unweighted criteria by its corresponding weight in the weights list
    all_weighted_criteria.append(weighted) # then we add the new weighted criteria to the list of all weights



# ADD ALL SCORES TO GET FINAL SCORE (If constraints are used, include them in this section as a mutiplication step)
criteria_sum = csv.math_add(all_weighted_criteria) #so this produces a new list which is the addition of each row of each of the weighted criteria in the all_weighted_criteria list
print(criteria_sum)


# Finally, we can add the full MCE score to the CSV
csv.append_column(criteria_sum,"MCE Vulnerability Score")

csv.write_csv("Vulnerability_MCE_Output_Test_4_no_constraint") # write the final file. Notice that none of the changes you've made so far are saved in the real file until you write it to a file here